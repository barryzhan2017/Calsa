; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@0 = private unnamed_addr constant [3 x i8] c"aa\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"bb\00", align 1
@2 = private unnamed_addr constant [3 x i8] c"cc\00", align 1
@3 = private unnamed_addr constant [3 x i8] c"dd\00", align 1
@4 = private unnamed_addr constant [3 x i8] c"ee\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %x = alloca [5 x i8*]
  store [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0)], [5 x i8*]* %x
  %x1 = load [5 x i8*], [5 x i8*]* %x
  %0 = extractvalue [5 x i8*] %x1, 2
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i8* %0)
  ret i32 0
}
