; ModuleID = 'MicroC'
source_filename = "MicroC"

%List = type { i8*, %List* }

@a = global i32 0
@b = global i32 0
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i32 @add(%List)

define i32 @gcd(i32 %a, i32 %b) {
entry:
  %a1 = alloca i32
  store i32 %a, i32* %a1
  %b2 = alloca i32
  store i32 %b, i32* %b2
  br label %while

while:                                            ; preds = %if_end, %entry
  %a3 = load i32, i32* %a1
  %b4 = load i32, i32* %b2
  %tmp = icmp ne i32 %a3, %b4
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %b5 = load i32, i32* %b2
  %a6 = load i32, i32* %a1
  %tmp7 = icmp slt i32 %b5, %a6
  br i1 %tmp7, label %then, label %else

then:                                             ; preds = %while_body
  %a8 = load i32, i32* %a1
  %b9 = load i32, i32* %b2
  %tmp10 = sub i32 %a8, %b9
  store i32 %tmp10, i32* %a1
  br label %if_end

else:                                             ; preds = %while_body
  %b11 = load i32, i32* %b2
  %a12 = load i32, i32* %a1
  %tmp13 = sub i32 %b11, %a12
  store i32 %tmp13, i32* %b2
  br label %if_end

if_end:                                           ; preds = %else, %then
  br label %while

while_end:                                        ; preds = %while
  %a14 = load i32, i32* %a1
  ret i32 %a14
}

define float @gcdf(float %a, float %b) {
entry:
  %a1 = alloca float
  store float %a, float* %a1
  %b2 = alloca float
  store float %b, float* %b2
  br label %while

while:                                            ; preds = %if_end, %entry
  %a3 = load float, float* %a1
  %b4 = load float, float* %b2
  %tmp = fcmp one float %a3, %b4
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %b5 = load float, float* %b2
  %a6 = load float, float* %a1
  %tmp7 = fcmp olt float %b5, %a6
  br i1 %tmp7, label %then, label %else

then:                                             ; preds = %while_body
  %a8 = load float, float* %a1
  %b9 = load float, float* %b2
  %tmp10 = fsub float %a8, %b9
  store float %tmp10, float* %a1
  br label %if_end

else:                                             ; preds = %while_body
  %b11 = load float, float* %b2
  %a12 = load float, float* %a1
  %tmp13 = fsub float %b11, %a12
  store float %tmp13, float* %b2
  br label %if_end

if_end:                                           ; preds = %else, %then
  br label %while

while_end:                                        ; preds = %while
  %a14 = load float, float* %a1
  ret float %a14
}

define i32 @main() {
entry:
  %x = alloca i32
  %y = alloca i32
  %c = alloca float
  %d = alloca float
  store i32 18, i32* @a
  store i32 9, i32* @b
  store i32 2, i32* %x
  store i32 14, i32* %y
  store float 3.000000e+00, float* %c
  store float 3.000000e+00, float* %d
  %y1 = load i32, i32* %y
  %x2 = load i32, i32* %x
  %gcd_result = call i32 @gcd(i32 %x2, i32 %y1)
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %gcd_result)
  %gcd_result3 = call i32 @gcd(i32 3, i32 15)
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %gcd_result3)
  %gcd_result5 = call i32 @gcd(i32 99, i32 121)
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), i32 %gcd_result5)
  %b = load i32, i32* @b
  %a = load i32, i32* @a
  %gcd_result7 = call i32 @gcd(i32 %a, i32 %b)
  %printf8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), i32 %gcd_result7)
  %d9 = load float, float* %d
  %c10 = load float, float* %c
  %gcdf_result = call float @gcdf(float %c10, float %d9)
  %printf11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.4, i32 0, i32 0), float %gcdf_result)
  %printf12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.5, i32 0, i32 0), float 6.000000e+00)
  ret i32 0
}
